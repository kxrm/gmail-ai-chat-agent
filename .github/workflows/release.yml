name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        tools: composer:v2
    
    - name: Install dependencies
      run: composer install --no-dev --prefer-dist --no-progress --no-interaction
    
    - name: Run full test suite
      run: |
        mkdir -p storage/logs storage/sessions storage/sessions/temp_sessions
        composer test
    
    - name: Validate version format
      run: |
        if [[ "${{ github.event.inputs.version || github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "✅ Valid version format"
        else
          echo "❌ Invalid version format. Use semantic versioning (e.g., v1.0.0)"
          exit 1
        fi

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        CURRENT_TAG="${{ github.event.inputs.version || github.ref_name }}"
        
        echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
        
        # Generate changelog
        if [ -n "$PREVIOUS_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%an)" $PREVIOUS_TAG..HEAD)
        else
          COMMITS=$(git log --pretty=format:"- %s (%an)")
        fi
        
        # Create changelog content
        cat > CHANGELOG_TEMP.md << EOF
        ## What's Changed
        
        $COMMITS
        
        ## Project Stats
        - **PHP Version**: 8.2+
        - **Test Coverage**: 90%+ line coverage
        - **Test Suite**: 124 unit tests, 8 integration tests, 10 E2E tests
        - **Dependencies**: $(composer show --installed --no-dev | wc -l) production packages
        
        ## Installation
        
        \`\`\`bash
        git clone https://github.com/kxrm/gmail-ai-chat-agent.git
        cd gmail-ai-chat-agent
        composer install --no-dev
        \`\`\`
        
        ## Docker Development
        
        \`\`\`bash
        # Open in VS Code with DevContainer
        code .
        # Container will auto-build with all dependencies
        \`\`\`
        
        **Full Changelog**: https://github.com/kxrm/gmail-ai-chat-agent/compare/$PREVIOUS_TAG...$CURRENT_TAG
        EOF
        
        # Set output for next step
        echo "changelog_file=CHANGELOG_TEMP.md" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: ${{ github.event.inputs.version || github.ref_name }}
        body_path: CHANGELOG_TEMP.md
        prerelease: ${{ github.event.inputs.prerelease || false }}
        generate_release_notes: true
        files: |
          README.md
          composer.json
          LICENSE
    
    - name: Update project version
      if: github.event_name == 'workflow_dispatch'
      run: |
        # Update version in composer.json if it exists
        if [ -f composer.json ]; then
          VERSION="${{ github.event.inputs.version }}"
          # Remove 'v' prefix for composer.json
          CLEAN_VERSION=${VERSION#v}
          
          # Update composer.json version (if version field exists)
          jq --arg version "$CLEAN_VERSION" '.version = $version' composer.json > composer.json.tmp
          mv composer.json.tmp composer.json
          
          # Commit the version update
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add composer.json
          git commit -m "chore: bump version to $VERSION" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref_name }} || echo "No changes to push"
        fi

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: create-release
    if: always() && needs.create-release.result == 'success'
    
    steps:
    - name: Create success comment
      uses: actions/github-script@v6
      with:
        script: |
          const version = '${{ github.event.inputs.version || github.ref_name }}';
          const releaseUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${version}`;
          
          await github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: `🚀 **Release ${version} Published!**\n\n[View Release](${releaseUrl})\n\nThe release includes:\n- ✅ Full test validation\n- 📋 Auto-generated changelog\n- 📦 Release artifacts\n- 🔖 Semantic versioning\n\nThanks for contributing to Gmail AI Chat Agent!`
          }); 